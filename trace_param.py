#!/usr/bin/env python
""" Reads LeCroy trc binay files

Convert binary .trc files generated by LeCroy oscilloscopes into python arrays
based on
https://github.com/yetifrisstlama/readTrc
"""
import numpy as np
try:
    import htest
    cyt = True
except ImportError:
    cyt = False

from readTrc import *


def trace_extr(filename, bg_correction=True):
    """ extract the trace with option vertical offset correction

    :param filename: .trc file containing the trace
    :type filename: file path
    :param bg_correction: offset correction flag, defaults to True
    :type bg_correction: bool, optional
    :returns: trace
    :rtype: array of float
    """

    _, signal, _ = readTrc(filename)
    if bg_correction:
        if cyt:
            return signal - find_bg_c(signal)
        return signal - find_bg(signal)
    return signal


def full_extr(filename):

    time, signal, d = readTrc(filename)
    return time, signal, d


def find_bg(signal, bins=501):
    """find vertical offsets

    :param signal: trace
    :type signal: array of float
    :param bins: number of bins, defaults to 501
    :type bins: int, optional
    :returns: peak of the histogram
    :rtype: float
    """
    freq, ampl = np.histogram(signal, bins)
    return ampl[np.argmax(freq)]


def find_bg_c(signal, bins=501):
    """find vertical offsets

    :param signal: trace
    :type signal: array of float
    :param bins: number of bins, defaults to 501
    :type bins: int, optional
    :returns: peak of the histogram
    :rtype: float
    """
    h = htest.hist1d(bins, np.min(signal), np.max(signal))
    h.fillcy(signal, np.ones(len(signal)))
    # h.fillcywithcall(signal, np.ones(bins))
    return h.xaxis.values()[np.argmax(h.data)]


if __name__ == '__main__':
    import glob

    # path = "./"
    filelist = glob.glob(path + "*.trc")

    data = [trace_extr(f) for f in filelist]

